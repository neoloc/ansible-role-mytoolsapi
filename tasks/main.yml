---
# tasks file for role

- name: Deploy the MyToolsAPI service
  when: mytoolsapi_configure == true
  tags: mytoolsapi
  block:
    - name: Ensure group exists with correct gid
      ansible.builtin.group:
        name: "{{ mytoolsapi_group }}"
        state: present
        gid: "{{ mytoolsapi_gid }}"

    - name: Ensure user exists with correct uid and group
      ansible.builtin.user:
        name: "{{ mytoolsapi_user }}"
        comment: mytoolsapi user
        system: true
        uid: "{{ mytoolsapi_uid }}"
        group: "{{ mytoolsapi_group }}"

    - name: Create the directory for mytoolsapi
      ansible.builtin.file:
        path: "{{ mytoolsapi_dir }}"
        state: directory
        mode: '0755'
        owner: "{{ mytoolsapi_user }}"
        group: "{{ mytoolsapi_group }}"

    - name: Clone the mytoolsapi git repository
      ansible.builtin.git:
        repo: "{{ mytoolsapi_gitsource}}"
        dest: "{{ mytoolsapi_dir }}"
        force: yes
      become: yes
      become_user: "{{ mytoolsapi_user }}"

    - name: Check for poetry lock file
      stat:
        path: "{{ mytoolsapi_dir }}/poetry.lock"
      register: poetry_lockfile

    - name: Install mytoolsapi with poetry
      ansible.builtin.command: "{{ mytoolsapi_poetry_path }} install"
      become: yes
      become_user: "{{ mytoolsapi_user }}"
      args:
        chdir: "{{ mytoolsapi_dir }}"
      when: not poetry_lockfile.stat.exists

    - name: Update mytoolsapi with poetry
      ansible.builtin.command: "{{ mytoolsapi_poetry_path }} update"
      become: yes
      become_user: "{{ mytoolsapi_user }}"
      args:
        chdir: "{{ mytoolsapi_dir }}"
      when: poetry_lockfile.stat.exists

    - name: Install required packages
      apt:
        name: "{{ mytoolsapi_apt_packages }}"
        state: present

    - name: Create the directory for chrome-binary
      ansible.builtin.file:
        path: "/home/{{ mytoolsapi_user }}/.local/share/pyppeteer/local-chromium/{{ mytoolsapi_chrome_build }}/"
        state: directory
        mode: '0755'
        owner: "{{ mytoolsapi_user }}"
        group: "{{ mytoolsapi_group }}"

    - name: Check if chrome has already been downloaded
      stat:
        path: "/home/{{ mytoolsapi_user }}/.local/share/pyppeteer/local-chromium/{{ mytoolsapi_chrome_build }}/chrome-linux/chrome"
      register: chrome_downloaded

    - name: Download and unzip Chrome-Linux build for python
      ansible.builtin.unarchive:
        src: "https://storage.googleapis.com/chromium-browser-snapshots/Linux_x64/{{ mytoolsapi_chrome_build }}/chrome-linux.zip"
        dest: "/home/{{ mytoolsapi_user }}/.local/share/pyppeteer/local-chromium/{{ mytoolsapi_chrome_build }}/"
        remote_src: yes
        mode: '0770'
        owner: "{{ mytoolsapi_user }}"
        group: "{{ mytoolsapi_group }}"
      when: not chrome_downloaded.stat.exists
